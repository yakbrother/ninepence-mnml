---
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout 
  title="guestbook | mostly true"
  description="Leave a message in my guestbook - share your thoughts, stories, or just say hello!"
>
  <article class="stack">
      <h1>Sign My Guestbook</h1>
      <hr/>
      <p>
        Alright, pretend it's the early 2000s again. Did you ever have a
        guestbook on your site? It's a fun old way to meet new people and find
        other blogs. Leave a message and I'll add it to the guestbook - and I'll
        sign yours if you have one!
      </p>

      <form
        name="guestbook"
        method="POST"
        data-netlify="true"
        action="/thank-you"
        aria-labelledby="guestbook-title"
        novalidate
      >
        <input type="hidden" name="form-name" value="guestbook" />

        <fieldset>
          <legend class="visually-hidden">Contact Information</legend>
          <div class="form-row">
            <div class="form-group">
              <label for="name">Your Name: <span class="required" aria-label="required">*</span></label>
              <input 
                type="text" 
                id="name" 
                name="name" 
                required 
                aria-required="true"
                aria-describedby="name-error"
                aria-invalid="false"
              />
              <div id="name-error" class="error-text" role="alert" aria-live="polite"></div>
            </div>

            <div class="form-group">
              <label for="email">Email (Optional):</label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                aria-describedby="email-help email-error"
                aria-invalid="false"
              />
              <div id="email-help" class="help-text">We'll only use this to respond to your message</div>
              <div id="email-error" class="error-text" role="alert" aria-live="polite"></div>
            </div>
          </div>

          <div class="form-group">
            <label for="website">Website (Optional):</label>
            <input 
              type="url" 
              id="website" 
              name="website" 
              placeholder="https://example.com"
              aria-describedby="website-error"
              aria-invalid="false"
            />
            <div id="website-error" class="error-text" role="alert" aria-live="polite"></div>
          </div>
        </fieldset>

        <fieldset>
          <legend class="visually-hidden">Message</legend>
          <div class="form-group">
            <label for="message">Your Message: <span class="required" aria-label="required">*</span></label>
            <textarea 
              id="message" 
              name="message" 
              rows="5" 
              required 
              aria-required="true" 
              aria-describedby="message-help message-error"
              aria-invalid="false"
            ></textarea>
            <div id="message-help" class="help-text">Share your thoughts, stories, or just say hello!</div>
            <div id="message-error" class="error-text" role="alert" aria-live="polite"></div>
          </div>
        </fieldset>

        <button type="submit" aria-describedby="submit-status">Submit</button>
        <div id="submit-status" class="submit-status" role="status" aria-live="polite"></div>
      </form>
    </article>

  <style>
    .guestbook-container {
      max-width: 600px;
      margin: 0 auto;
      padding: 2rem;
    }

    form {
      margin-top: var(--s2);
    }

    fieldset {
      border: none;
      padding: 0;
      margin: 0 0 1.5rem 0;
    }

    legend {
      font-weight: bold;
      margin-bottom: 0.5rem;
    }

    .visually-hidden {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-row {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .form-row .form-group {
      margin-bottom: 0;
    }

    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }

    .required {
      color: #d32f2f;
    }

    .help-text {
      font-size: 0.875rem;
      color: #666;
      margin-top: 0.25rem;
    }

    .error-text {
      font-size: 0.875rem;
      color: #d32f2f;
      margin-top: 0.25rem;
      display: none;
    }

    .error-text:not(:empty) {
      display: block;
    }

    .submit-status {
      margin-top: 1rem;
      padding: 0.5rem;
      border-radius: 4px;
      font-weight: 500;
    }

    .submit-status.success {
      background-color: #e8f5e8;
      color: #2e7d32;
      border: 1px solid #4caf50;
    }

    .submit-status.error {
      background-color: #ffebee;
      color: #c62828;
      border: 1px solid #f44336;
    }

    input[aria-invalid="true"],
    textarea[aria-invalid="true"] {
      border-color: #d32f2f;
      background-color: #ffebee;
    }

    input[aria-invalid="true"]:focus,
    textarea[aria-invalid="true"]:focus {
      outline-color: #d32f2f;
      border-color: #d32f2f;
    }

    input,
    textarea {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #bbb;
      border-radius: 4px;
      background-color: white;
      color: var(--color-text);
      font-family: inherit;
    }

    input:focus,
    textarea:focus {
      outline: 2px solid var(--color-special);
      outline-offset: 2px;
      border-color: var(--color-special);
    }

    button {
      padding: 0.75rem 1.5rem;
      background-color: var(--color-dark);
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 500;
    }

    button:hover {
      background-color: var(--color-special);
    }

    button:focus {
      outline: 2px solid var(--color-special);
      outline-offset: 2px;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.querySelector('form[name="guestbook"]') as HTMLFormElement;
      const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;
      const submitStatus = document.getElementById('submit-status');

      if (!form || !submitButton || !submitStatus) return;

      // Form validation
      function validateField(field: HTMLInputElement | HTMLTextAreaElement) {
        const errorElement = document.getElementById(field.id + '-error');
        let isValid = true;
        let errorMessage = '';

        // Clear previous error
        if (errorElement) {
          errorElement.textContent = '';
        }
        field.setAttribute('aria-invalid', 'false');

        // Required field validation
        if (field.hasAttribute('required') && !field.value.trim()) {
          isValid = false;
          errorMessage = 'This field is required.';
        }

        // Email validation
        if (field.type === 'email' && field.value.trim()) {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(field.value)) {
            isValid = false;
            errorMessage = 'Please enter a valid email address.';
          }
        }

        // URL validation
        if (field.type === 'url' && field.value.trim()) {
          try {
            new URL(field.value);
          } catch {
            isValid = false;
            errorMessage = 'Please enter a valid URL (including https://).';
          }
        }

        // Set error state
        if (!isValid && errorElement) {
          errorElement.textContent = errorMessage;
          field.setAttribute('aria-invalid', 'true');
        }

        return isValid;
      }

      // Real-time validation
      const fields = form.querySelectorAll('input, textarea') as NodeListOf<HTMLInputElement | HTMLTextAreaElement>;
      fields.forEach(field => {
        field.addEventListener('blur', () => validateField(field));
        field.addEventListener('input', () => {
          if (field.getAttribute('aria-invalid') === 'true') {
            validateField(field);
          }
        });
      });

      // Form submission
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        let isFormValid = true;
        fields.forEach(field => {
          if (!validateField(field)) {
            isFormValid = false;
          }
        });

        if (isFormValid) {
          submitButton.disabled = true;
          submitButton.textContent = 'Submitting...';
          submitStatus.textContent = 'Submitting your message...';
          submitStatus.className = 'submit-status';

          // Simulate form submission (replace with actual submission logic)
          setTimeout(() => {
            submitStatus.textContent = 'Thank you! Your message has been submitted.';
            submitStatus.className = 'submit-status success';
            form.reset();
            submitButton.disabled = false;
            submitButton.textContent = 'Submit';
          }, 2000);
        } else {
          submitStatus.textContent = 'Please fix the errors above.';
          submitStatus.className = 'submit-status error';
          // Focus first error field
          const firstError = form.querySelector('[aria-invalid="true"]') as HTMLElement;
          if (firstError) {
            firstError.focus();
          }
        }
      });
    });
  </script>
</BaseLayout> 