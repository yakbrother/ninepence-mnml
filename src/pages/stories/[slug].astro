---
import { sanityClient } from 'sanity:client';
import BaseLayout from '../../layouts/BaseLayout.astro';

// Simple markdown to HTML converter for basic formatting
function markdownToHtml(markdown: string): string {
  return (
    markdown
      // Convert **bold** to <strong>
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
      // Convert *italic* to <em>
      .replace(/\*(.*?)\*/g, "<em>$1</em>")
      // Convert _italic_ to <em>
      .replace(/_(.*?)_/g, "<em>$1</em>")
      // Convert [link text](url) to <a href="url">link text</a>
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
      // Convert line breaks to <br>
      .replace(/\n\n/g, "</p><p>")
      .replace(/\n/g, "<br>")
      // Wrap in paragraphs
      .replace(/^(.+)$/s, "<p>$1</p>")
      // Clean up empty paragraphs
      .replace(/<p><\/p>/g, "")
      .replace(/<p><br><\/p>/g, "")
  );
}

export async function getStaticPaths() {
  const stories = await sanityClient.fetch(`*[_type == "story"]`);
  return stories.map(story => {
    return {
      params: { slug: story.slug.current },
      props: { story }
    };
  });
}

const { slug } = Astro.params;
const story = await sanityClient.fetch(`*[_type == "story" && slug.current == $slug][0]`, { slug });

if (!story) {
  return Astro.redirect('/404');
}

// Process markdown content
const processedContent = markdownToHtml(story.content);
---

<BaseLayout
  title={`${story.title.toLowerCase()} | mostly true`}
  description={story.description}
>
  <article class="stack">
    <h1>{story.title.toLowerCase()}</h1>
    <hr/>
    <div class="post-date">{new Date(story.date).toLocaleString('en-GB', { month: 'short', year: 'numeric', day: 'numeric' }).toLowerCase()} - virgil eaton</div>
    <Fragment set:html={processedContent} />
    {Array.isArray(story.tags) && story.tags.length > 0 && (
      <nav class="tag-list" aria-labelledby="tags-heading" style="margin-top:2em;">
        <h2 id="tags-heading" class="visually-hidden">Story tags</h2>
        <ul class="tag-list-items">
          {story.tags.map((tag: string) => (
            <li><a href={`/tags/${encodeURIComponent(tag)}/`} class="tag">{tag.toLowerCase()}</a></li>
          ))}
        </ul>
      </nav>
    )}
  </article>
</BaseLayout> 