---
export interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const { 
  title = 'mostly true', 
  description = "stories about busking around the world, dancing through the streets, life in a wheelchair, camping, wild animals, and more...", 
  image = "/assets/og_default.jpg" 
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site || 'https://mostlytrue.life');
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="theme-color" content="#442625" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<link
  rel="icon"
  href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ”¬</text></svg>"
/>
<link rel="preload" href="/fonts/arvo-regular.woff2" as="font" type="font/woff2" crossorigin>
<link rel="preload" href="/fonts/arvo-bold.woff2" as="font" type="font/woff2" crossorigin>
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content="Virgil Eaton" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.site || 'https://mostlytrue.life')} />
<meta property="og:site_name" content="mostly true" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.site || 'https://mostlytrue.life')} />

<script is:inline>
  function init() {
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    document.addEventListener("scroll", onScroll);
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 100);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
</script>
