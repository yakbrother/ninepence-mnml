---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Meta from '../components/Meta.astro';
import WhatNext from '../components/WhatNext.astro';
import BackToTop from '../components/BackToTop.astro';
import StoryList from '../components/StoryList.astro';
import '../styles/global.css';
export interface Props {
  title?: string;
  description?: string;
}
const { title = 'mostly true | virgil eaton', description } = Astro.props;

// Check if we're on the stories index page to avoid showing the story list there
const isStoriesIndexPage = Astro.url.pathname === '/stories/';

// Extract current story ID from URL if we're on a story page
let currentStoryId: string | undefined = undefined;
if (Astro.url.pathname.startsWith('/stories/') && Astro.url.pathname !== '/stories/') {
  // Extract the story ID from the URL path
  const pathParts = Astro.url.pathname.split('/');
  if (pathParts.length >= 3) {
    currentStoryId = pathParts[2]; // /stories/[id]/ -> [id]
  }
} else if (Astro.url.pathname === '/') {
  // On the index page, we need to get the newest story ID
  // We'll need to fetch the stories to get the newest one
  const { getCollection } = await import('astro:content');
  const stories = await getCollection('stories');
  const sortedStories = stories.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
  if (sortedStories.length > 0) {
    currentStoryId = sortedStories[0].id;
  }
}
---
<html lang="en">
  <head>
    <Meta />
    <title>{title}</title>
    <meta name="title" content="{title}" />
    {description && <meta name="description" content={description} />}
  </head>
  <body>
    <a href="#main-content" class="skip-link">Skip to main content</a>
    <Header />
    <main id="main-content" class="content">
      <slot />
      <WhatNext />
      {!isStoriesIndexPage && (
        <>
          <h2>All Stories</h2>
          <StoryList currentStory={currentStoryId} />
        </>
      )}
      <BackToTop />
    </main>
    <Footer />
  </body>
</html> 